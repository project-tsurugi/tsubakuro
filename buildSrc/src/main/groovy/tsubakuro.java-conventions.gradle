plugins {
    id 'tsubakuro.java-base'
    id 'checkstyle'

    id 'com.github.spotbugs'
    id 'com.github.hierynomus.license'
}

repositories {
    mavenCentral()
}

java {
    withSourcesJar()
    withJavadocJar()
}

dependencies {
    api 'com.google.code.findbugs:jsr305:3.0.2'
    api 'org.slf4j:slf4j-api:1.7.36'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'
    testImplementation platform('org.junit:junit-bom:5.10.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

checkstyle {
    configFile = rootProject.file('buildSrc/src/main/resources/checkstyle.xml')
    if ('strict' == findProperty('checkMode')) {
        maxWarnings = 0
    }
}
checkstyleMain.exclude '**/proto/*.java'

spotbugsMain {
    onlyAnalyze = [ 'com.tsurugidb.tsubakuro.-' ]
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
    }
    excludeFilter = rootProject.file('buildSrc/src/main/resources/spotbugsExclude.xml')
}

spotbugsTest.enabled = false
checkstyleTest.enabled = false

javadoc {
    failOnError = true
    exclude "**/proto/**"
    options.addStringOption('Xdoclint', '-quiet')
}

jar {
    manifest.attributes (
        'Build-Timestamp': buildTimestamp,
        'Build-Revision' : buildRevision,
        'Build-Version'  : version,
        'Created-By'     : createdBy,
        'Build-Jdk'      : buildJdk,
        'Build-OS'       : buildOs,
    )
}

task writeVersion(type: WriteProperties) {
    description 'generate version file to META-INF/tsurugidb/{project.name}.properties'
    inputs.property('Build-Revision', buildRevision)
    destinationFile = file("${project.buildDir}/generated/version/META-INF/tsurugidb/${project.name}.properties")
    properties (
        'Build-Timestamp': buildTimestamp,
        'Build-Revision' : buildRevision,
        'Build-Version'  : version,
        'Created-By'     : createdBy,
        'Build-Jdk'      : buildJdk,
        'Build-OS'       : buildOs,
    )
}
sourceSets.main.output.dir("${project.buildDir}/generated/version")
processResources.dependsOn writeVersion

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        showStandardStreams true
        events 'started', 'skipped', 'passed', 'failed'
        exceptionFormat 'full'
    }
}

license {
    def confDir = 'buildSrc/src/main/resources'
    header rootProject.file("$confDir/source-header.txt")
    mapping('java', 'SLASHSTAR_STYLE')
    include('**/*.java')
    ignoreFailures true
}
